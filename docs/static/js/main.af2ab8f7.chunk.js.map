{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getData","setData","setLook","a","axios","get","res","json","data","console","log","jsonData","dates","map","item","diagnosed_date","counts","count","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","date","slice","error","App","useState","look","range","setRange","useEffect","style","position","width","textAlign","color","fontSize","split","replace","top","height","overflowX","overflowY","paddingTop","window","innerWidth","redraw","innerHeight","options","responsive","maintainAspectRatio","marginTop","type","id","name","min","max","value","step","onChange","e","parseInt","target","htmlFor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af2ab8f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chart, { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\n\nconst getData = async (setData, setLook) => {\n  try {\n    const res = await axios.get(\"https://raw.githubusercontent.com/tokyo-metropolitan-gov/covid19/master/data/daily_positive_detail.json\");\n    const json = res.data;\n    console.log(json);\n    const jsonData = json.data;\n    const dates = jsonData.map(item=>item.diagnosed_date);\n    const counts = jsonData.map(item=>item.count);\n    console.log(dates, counts);\n\n    const data = {\n      labels: dates,\n      datasets: [\n        {\n          label: \"COVID-19 in TOKYO\",\n          backgroundColor: 'rgba(255,99,132,0.2)',\n          borderColor: 'rgba(255,99,132,1)',\n          borderWidth: 1,\n          hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n          hoverBorderColor: 'rgba(255,99,132,1)',\n          data: counts\n        }\n      ]\n    };\n\n    setData(data);\n    setLook({date: json.date, count: counts.slice(-1)[0]});\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nfunction App() {\n  // 感染者の過去全データ\n  const [data, setData] = useState({});\n  // 今日の日付・感染者数\n  const [look, setLook] = useState({date: \"\", count: null});\n  const [range, setRange] = useState(0);\n\n  useEffect(() => {\n    getData(setData, setLook);\n  }, []);\n\n  return (\n    <>\n      <h2\n        style={{\n          position: \"fixed\",\n          width: \"100vw\",\n          textAlign: \"center\",\n          color: \"black\",\n          fontSize: \"5vh\",\n        }}\n      >\n        {look.date.split(\" \")[0].replace(\"/\", \"年 \").replace(\"/\", \"月\")+\"日\"}\n      </h2>\n      <h1\n        style={{\n          position: \"fixed\",\n          width: \"100vw\",\n          textAlign: \"center\",\n          color: \"crimson\",\n          fontSize: \"10vh\",\n          top: \"8vh\",\n        }}\n      >\n        <a style={{fontSize: \"5vh\", color:\"black\"}}>感染者 </a>\n        {look.count}\n        <a style={{fontSize: \"5vh\", color:\"black\"}}> 人</a>\n      </h1>\n      <div style={{width: `${100 + 700 * (range / 100)}vw`, height: \"50vh\", overflowX: \"scroll\", overflowY: \"hidden\", paddingTop: \"30vh\"}}>\n        <Bar\n          data={data}\n          width={window.innerWidth + (1 + 7 * (range / 100))}\n          redraw={true}\n          height={window.innerHeight * 0.5}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false\n          }}\n        />\n      </div>\n      <div style={{position: \"fixed\", width: \"100vw\", textAlign: \"center\", marginTop: \"5vh\"}}>\n        <input type=\"range\" id=\"dataRange\" name=\"dataRange\" min=\"0\" max=\"100\" value={range} step=\"1\" onChange={(e)=>setRange(parseInt(e.target.value))} />\n        <label htmlFor=\"dataRange\">Range</label>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}